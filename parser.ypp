%{
        #include <stdio.h>
        #include "hw3_output.hpp"
        #include "symbolTable.hpp"
        #include "llvm_comp.hpp"
        #include <iostream>
        #include <stdlib.h>

        using namespace std;
        using namespace output;

	extern int yylex();
        extern int yylineno;
	int yyerror(const char * message);
        LLVM_Comp &comp = LLVM_Comp::getInstance();
%}

%nonassoc VOID INT BYTE B BOOL
%right ID NUM STRING
%right ASSIGN
%left OR AND
%nonassoc TRUE FALSE RETURN IF WHILE BREAK CONTINUE COMMA 
%left RELOP_EQ RELOP BINOP BINOP_MUL_DIV
%right NOT
%left LPAREN RPAREN LBRACE RBRACE SC
%nonassoc ELSE

%%

Program :  Funcs {if(yychar==YYEOF) {comp.sym.closeGlobalScope();} else {errorSyn(yylineno);}}

Funcs   :/* Epsilon */ 
        |FuncDecl Funcs

FuncDecl:RetType ID LPAREN Formals RPAREN {comp.declareFunc((Type*)$1, (Id*)$2, (Formals*)$4);} LBRACE Statements RBRACE {comp.closeFunction((Type*)$1); comp.sym.setCurrFunction(); comp.sym.closeScope();} //

RetType :Type {$$ = new Type((Type*)$1);}
        |VOID {$$ = new Type(V_VOID);}
 
Formals :/* Epsilon */ {$$ = new Formals();}
        |FormalsList {$$ = new Formals((FormalsList*)$1);}

FormalsList : FormalDecl {$$ = new FormalsList((FormalDecl*)$1);} 
            | FormalDecl COMMA FormalsList {$$ = new FormalsList((FormalDecl*)$1, (FormalsList*)$3);}

FormalDecl  :Type ID {$$ = new FormalDecl((Type*)$1, (Id*)$2);}

Statements  :Statement
            |Statements Statement

Statement   :LBRACE OPEN_SCOPE Statements CLOSE_SCOPE RBRACE {$$ = $3}
        |Type ID SC {$$ = new Statement((Type*)$1,(Id*)$2);}//
        |Type ID ASSIGN Exp SC {$$ = new Statement((Type*)$1,(Id*)$2,(Exp*)$4);}//
        |ID ASSIGN Exp SC {$$ = new Statement((Id*)$1,(Exp*)$3);}//
        |Call SC {$$ = new Statement((Call*)$1);}//
        |RETURN SC {$$ = new Statement($1);} //
        |RETURN Exp SC {$$ = new Statement($1,(Exp*)$2);} //
        |IF LPAREN IS_EXP_BOOL RPAREN OPEN_SCOPE Statement CLOSE_SCOPE {} %prec IF
        |IF LPAREN IS_EXP_BOOL RPAREN OPEN_SCOPE Statement CLOSE_SCOPE ELSE OPEN_SCOPE Statement CLOSE_SCOPE {} %prec IF 
        |WHILE LPAREN WHILE_M_START IS_EXP_BOOL RPAREN OPEN_SCOPE Statement WHILE_M_FINISH {$$ = comp.end_while((Exp*)$4,(Statement*)$7);}
        |BREAK SC {$$ = new Statement($1);}
        |CONTINUE SC {$$ = new Statement($1);}

IS_EXP_BOOL : Exp {comp.sym.checkExpBool((Exp*)$1); $$ = (Exp*)$1;}

WHILE_M_START : /*epsilon*/ {comp.start_while();}
WHILE_M_FINISH: /*epsilon*/ {comp.end_while(); comp.sym.closeScope();}

Call    :ID LPAREN ExpList RPAREN {$$ = new Call((Id*)$1,(Explist*)$3);}//
        |ID LPAREN RPAREN {$$ = new Call((Id*)$1);}//

ExpList :Exp {$$ = new Explist((Exp*)$1);}
        |Exp COMMA ExpList {$$ = new Explist((Exp*)$1, (Explist*)$3);}

Type    :INT {$$ = new Type(V_INT);}//
        |BYTE {$$ = new Type(V_BYTE);}//
        |BOOL {$$ = new Type(V_BOOL);}//

Exp :LPAREN Exp RPAREN {$$ = $2;}//
    |Exp IF LPAREN Exp RPAREN ELSE Exp {$$ = new Exp ((Exp*)$1, (Exp*)$4, (Exp*)$7);} %prec IF //
    |Exp BINOP Exp {$$ = new Exp ((Exp*)$1, $2, (Exp*)$3);} //
    |Exp BINOP_MUL_DIV Exp {$$ = new Exp ((Exp*)$1, $2, (Exp*)$3);} //
    |ID {$$ = new Exp ((Id*)$1);} 
    |Call {$$ = $1;} //
    |NUM {$$ = new Exp ($1);} //
    |NUM B {$$ = new Exp ($1, $2);} // 
    |STRING {$$ = new Exp ($1);} //
    |TRUE {$$ = new Exp ($1);} //
    |FALSE {$$ = new Exp ($1);} //
    |NOT Exp {$$ = new Exp ($1, (Exp*)$2);}//
    |Exp AND {comp.CreateBranch((Exp*)$1);comp.AddLabelAfterExpression((Exp*)$1);} Exp {$$ = new Exp(V_BOOL, (Exp*)$1, $2, (Exp*)$4);} //
    |Exp OR {comp.CreateBranch((Exp*)$1);comp.AddLabelAfterExpression((Exp*)$1);} Exp {$$ = new Exp(V_BOOL, (Exp*)$1, $2, (Exp*)$4);} //
    |Exp RELOP Exp {$$ = new Exp (V_BOOL, (Exp*)$1, $2, (Exp*)$3);}//
    |Exp RELOP_EQ Exp {$$ = new Exp (V_BOOL, (Exp*)$1, $2, (Exp*)$3);}//
    |LPAREN Type RPAREN Exp {$$ = new Exp ((Type*)$2,(Exp*)$4);} //


OPEN_SCOPE : /*epsilon */ {comp.sym.openScope();}
CLOSE_SCOPE: /*epsilon */ {comp.sym.closeScope();}
%%

int main()
{
        comp.sym.openScope();
        int result = yyparse();
        comp.printCodeBuffer();
        return result;
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
        exit(0);
}